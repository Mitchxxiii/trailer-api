"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-dynamic-delete */
/* eslint-disable dot-notation */
/* eslint-disable camelcase */
const url_1 = require("url");
const parseEndpoint_1 = __importDefault(require("./parseEndpoint"));
const normalizeQuery_1 = __importDefault(require("./normalizeQuery"));
const requests_1 = __importDefault(require("./requests"));
const catchHTTPErrors_1 = __importDefault(require("./catchHTTPErrors"));
const DataController_1 = __importDefault(require("../DataController"));
const createEndpoint = (type, endpoint) => {
    const data = DataController_1.default.getInstance();
    return async (options) => {
        const readyQuery = new url_1.URLSearchParams({
            api_key: data.get('apiKey'),
            language: data.get('language'),
        });
        let parsedEndpoint = null;
        let response = null;
        if (options === null || options === void 0 ? void 0 : options.pathParameters)
            parsedEndpoint = parseEndpoint_1.default(endpoint, options.pathParameters);
        if (options === null || options === void 0 ? void 0 : options.query) {
            const { query } = options;
            if (query['api_key'])
                delete query['api_key'];
            if (query['language'])
                delete query['language'];
            // eslint-disable-next-line array-bracket-newline
            normalizeQuery_1.default(query).forEach(([key, value]) => {
                readyQuery === null || readyQuery === void 0 ? void 0 : readyQuery.append(key, value);
            });
        }
        try {
            switch (type) {
                case 'GET': {
                    response = await requests_1.default(parsedEndpoint !== null && parsedEndpoint !== void 0 ? parsedEndpoint : endpoint, { searchParams: readyQuery !== null && readyQuery !== void 0 ? readyQuery : '' });
                    break;
                }
                case 'POST': {
                    response = await requests_1.default.post(endpoint, {
                        searchParams: readyQuery !== null && readyQuery !== void 0 ? readyQuery : '',
                        json: options === null || options === void 0 ? void 0 : options.body,
                    });
                    break;
                }
                case 'DELETE': {
                    response = await requests_1.default.delete(endpoint, {
                        searchParams: readyQuery !== null && readyQuery !== void 0 ? readyQuery : '',
                        json: options === null || options === void 0 ? void 0 : options.body,
                    });
                    break;
                }
            }
            return {
                data: JSON.parse(response.body),
                headers: response.headers,
            };
        }
        catch (error) {
            catchHTTPErrors_1.default(error);
            throw error;
        }
    };
};
exports.default = (endpoints) => {
    const root = {};
    endpoints.forEach(endpoint => {
        root[endpoint.name] = createEndpoint(endpoint.type, endpoint.endpoint);
    });
    return root;
};
